pragma solidity ^0.4.24;

import "./Ownable.sol";
import "./FarmerRole.sol";
import "./DistributorRole.sol";
import "./RetailerRole.sol";
import "./ConsumerRole.sol";

contract SupplyChain is Ownable, FarmerRole, DistributorRole, RetailerRole, ConsumerRole {

  // Define a variable called 'upc' for Universal Product Code (UPC)
  uint  upc;

  // Define a variable called 'sku' for Stock Keeping Unit (SKU)
  uint  sku;

  mapping (uint => Item) items;

  mapping (uint => string[]) itemsHistory;
  enum State
  {
    Harvested,  // 0
    Processed,  // 1
    Packed,     // 2
    ForSale,    // 3
    Sold,       // 4
    Shipped,    // 5
    Received,   // 6
    Purchased   // 7
    }

  State constant defaultState = State.Harvested;

  struct Item {
    uint    sku;  // Stock Keeping Unit (SKU)
    uint    upc; // Universal Product Code (UPC), generated by the Farmer, goes on the package, can be verified by the Consumer
    address ownerID;  // Metamask-Ethereum address of the current owner as the product moves through 8 stages
    address originFarmerID; // Metamask-Ethereum address of the Farmer
    string  originFarmName; // Farmer Name
    string  originFarmInformation;  // Farmer Information
    string  originFarmLatitude; // Farm Latitude
    string  originFarmLongitude;  // Farm Longitude
    uint    productID;  // Product ID potentially a combination of upc + sku
    string  productNotes; // Product Notes
    uint    productPrice; // Product Price
    State   itemState;  // Product State as represented in the enum above
    address distributorID;  // Metamask-Ethereum address of the Distributor
    address retailerID; // Metamask-Ethereum address of the Retailer
    address consumerID; // Metamask-Ethereum address of the Consumer
  }

  event Harvested(uint upc);
  event Processed(uint upc);
  event Packed(uint upc);
  event ForSale(uint upc);
  event Sold(uint upc);
  event Shipped(uint upc);
  event Received(uint upc);
  event Purchased(uint upc);

  modifier verifyCaller (address _address) {
    require(msg.sender == _address, "verifies the Caller");
    _;
  }

  modifier paidEnough(uint _price) {
    require(msg.value >= _price, "Paid amount is not sufficient");
    _;
  }
  modifier checkValue(uint _upc) {
    _;
    uint _price = items[_upc].productPrice;
    uint amountToReturn = msg.value - _price;
    items[_upc].consumerID.transfer(amountToReturn);
  }

  modifier harvested(uint _upc) {
    require(items[_upc].itemState == State.Harvested, "is not Harvested");
    _;
  }

  modifier processed(uint _upc) {
    require(items[_upc].itemState == State.Processed, "Is not Processed");
    _;
  }
  modifier packed(uint _upc) {
    require(items[_upc].itemState == State.Packed, "is not Packed");
    _;
  }

  modifier forSale(uint _upc) {
    require(items[_upc].itemState == State.ForSale, "is not ForSale");
    _;
  }

  modifier sold(uint _upc) {
    require(items[_upc].itemState == State.Sold, "is not Sold");
    _;
  }
  modifier shipped(uint _upc) {
    require(items[_upc].itemState == State.Shipped, "is not Shipped");
    _;
  }

  modifier received(uint _upc) {
    require(items[_upc].itemState == State.Received, "Is not Received");
    _;
  }

  modifier purchased(uint _upc) {
    require(items[_upc].itemState == State.Purchased, "Is not Purchased");
    _;
  }

  // set 'sku' to 1 'upc' to 1
  constructor() public payable {
    sku = 1;
    upc = 1;
  }

  function kill() public {
    if (msg.sender == owner()) {
      selfdestruct(owner());
    }
  }

  function harvestItem(
    uint _upc,
    address _originFarmerID,
    string _originFarmName,
    string _originFarmInformation,
    string  _originFarmLatitude,
    string  _originFarmLongitude,
    string  _productNotes)
    public
    onlyFarmer
  {
    Item memory item = Item({
        sku: sku,
        upc: _upc,
        ownerID: _originFarmerID,
        originFarmerID: _originFarmerID,
        originFarmName: _originFarmName,
        originFarmInformation: _originFarmInformation,
        originFarmLatitude: _originFarmLatitude,
        originFarmLongitude: _originFarmLongitude,
        productID: sku+_upc,
        productNotes: _productNotes,
        productPrice: 0,
        itemState: defaultState,
        distributorID: 0,
        retailerID: 0,
        consumerID: 0
    });
    items[_upc] = item;
    sku = sku + 1;
    emit Harvested(_upc);
  }

  function processItem(uint _upc) public
  harvested(_upc)
  verifyCaller(items[_upc].originFarmerID)

  onlyFarmer
  {
    items[_upc].itemState = State.Processed;
    emit Processed(_upc);
  }

  function packItem(uint _upc) public
  processed(_upc)
  verifyCaller(items[_upc].originFarmerID)

  onlyFarmer
  {
    items[_upc].itemState = State.Packed;
    emit Packed(_upc);
  }

  function sellItem(uint _upc, uint _price) public
  packed(_upc)
  verifyCaller(items[_upc].originFarmerID)

  onlyFarmer
  {
    items[_upc].productPrice = _price;
    items[_upc].itemState = State.ForSale;
    emit ForSale(_upc);
  }

  function buyItem(uint _upc) public payable
    forSale(_upc)
    paidEnough(items[_upc].productPrice)
    checkValue(_upc)

    onlyDistributor
    {
    items[_upc].ownerID = msg.sender;
    items[_upc].distributorID = msg.sender;
    items[_upc].itemState = State.Sold;
    items[_upc].originFarmerID.transfer(items[_upc].productPrice);
    emit Sold(_upc);
  }

  function shipItem(uint _upc) public
    sold(_upc)
    verifyCaller(items[_upc].distributorID)

    onlyDistributor
    {
    items[_upc].itemState = State.Shipped;
    emit Shipped(_upc);
  }

  function receiveItem(uint _upc) public
    shipped(_upc)
    onlyRetailer
    {
    items[_upc].ownerID = msg.sender;
    items[_upc].retailerID = msg.sender;
    items[_upc].itemState = State.Received;
    emit Received(_upc);
  }

  function purchaseItem(uint _upc) public
    onlyConsumer
    {
    items[_upc].ownerID = msg.sender;
    items[_upc].consumerID = msg.sender;
    items[_upc].itemState = State.Purchased;
    emit Purchased(_upc);
  }

  function fetchItemBufferOne(uint _upc) public view returns
  (
  uint    itemSKU,
  uint    itemUPC,
  address ownerID,
  address originFarmerID,
  string  originFarmName,
  string  originFarmInformation,
  string  originFarmLatitude,
  string  originFarmLongitude
  )
  {
  itemSKU = items[_upc].sku;
  itemUPC = items[_upc].upc;
  ownerID = items[_upc].ownerID;
  originFarmerID = items[_upc].originFarmerID;
  originFarmName = items[_upc].originFarmName;
  originFarmInformation = items[_upc].originFarmInformation;
  originFarmLatitude = items[_upc].originFarmLatitude;
  originFarmLongitude = items[_upc].originFarmLongitude;
  return
  (
  itemSKU,
  itemUPC,
  ownerID,
  originFarmerID,
  originFarmName,
  originFarmInformation,
  originFarmLatitude,
  originFarmLongitude
  );
  }

  function fetchItemBufferTwo(uint _upc) public view returns
  (
  uint    itemSKU,
  uint    itemUPC,
  uint    productID,
  string  productNotes,
  uint    productPrice,
  uint    itemState,
  address distributorID,
  address retailerID,
  address consumerID
  )
  {
  itemSKU = items[_upc].sku;
  itemUPC = items[_upc].upc;
  productID = items[_upc].productID;
  productNotes = items[_upc].productNotes;
  productPrice = items[_upc].productPrice;
  itemState = uint256(items[_upc].itemState);
  distributorID = items[_upc].distributorID;
  retailerID = items[_upc].retailerID;
  consumerID = items[_upc].consumerID;
  return
  (
  itemSKU,
  itemUPC,
  productID,
  productNotes,
  productPrice,
  itemState,
  distributorID,
  retailerID,
  consumerID
  );
  }
}